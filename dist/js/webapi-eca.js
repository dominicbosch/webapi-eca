var argv,cm,conf,cp,db,e,encryption,engine,fs,http,init,log,nameEP,opt,optimist,path,shutDown,usage;if(log=require("./logging"),conf=require("./config"),db=require("./persistence"),cm=require("./components-manager"),engine=require("./engine"),http=require("./http-listener"),encryption=require("./encryption"),nameEP="trigger-poller",fs=require("fs"),path=require("path"),cp=require("child_process"),optimist=require("optimist"),usage="This runs your webapi-based ECA engine",opt={h:{alias:"help",describe:"Display this"},c:{alias:"config-path",describe:'Specify a path to a custom configuration file, other than "config/config.json"'},w:{alias:"http-port",describe:"Specify a HTTP port for the web server"},d:{alias:"db-port",describe:"Specify a port for the redis DB"},s:{alias:"db-select",describe:"Specify a database identifier"},m:{alias:"mode",describe:"Specify a run mode: [development|productive]"},i:{alias:"log-std-level",describe:"Specify the log level for the standard I/O"},f:{alias:"log-file-level",describe:"Specify the log level for the log file"},p:{alias:"log-file-path",describe:'Specify the path to the log file within the "logs" folder'},t:{alias:"log-trace",describe:"Whether full tracing should be enabled [on|off]. do not use in productive mode."},n:{alias:"nolog",describe:"Set this if no output shall be generated"}},argv=optimist.usage(usage).options(opt).argv,argv.help&&(console.log(optimist.help()),process.exit()),conf.init(argv.c),conf.isInit||(console.error("FAIL: Config file not ready! Shutting down..."),process.exit()),conf["http-port"]=parseInt(argv.w||conf["http-port"]||8125),conf["db-port"]=parseInt(argv.d||conf["db-port"]||6379),conf["db-select"]=parseInt(argv.s||conf["db-select"]||0),conf.log||(conf.log={}),conf.mode=argv.m||conf.mode||"productive",conf.log["std-level"]=argv.i||conf.log["std-level"]||"error",conf.log["file-level"]=argv.f||conf.log["file-level"]||"warn",conf.log["file-path"]=argv.p||conf.log["file-path"]||"warn",conf.log.trace=argv.t||conf.log.trace||"off",conf.log.nolog=argv.n||conf.log.nolog,!conf.log.nolog)try{fs.writeFileSync(path.resolve(conf.log["file-path"])," ")}catch(_error){e=_error,console.log(e)}log.init(conf),log.info("RS | STARTING SERVER"),init=function(e){return function(){return encryption.init(conf.keygenpp),log.info("RS | Initialzing DB"),db.init(conf["db-port"]),db.isConnected(function(e){var o;return db.selectDatabase(conf["db-select"]),e?(log.error("RS | No DB connection, shutting down system!"),shutDown()):(log.info("RS | Initialzing engine"),engine.init(),log.info("RS | Forking a child process for the trigger poller"),o=cp.fork(path.resolve(__dirname,nameEP)),o.send({intevent:"startup",data:conf}),fs.unlink("proc.pid",function(e){return e&&console.log(e),fs.writeFile("proc.pid","PROCESS PID: "+process.pid+"\nCHILD PID: "+o.pid+"\n")}),log.info("RS | Initialzing module manager"),cm.addRuleListener(engine.internalEvent),cm.addRuleListener(function(e){return o.send(e)}),log.info("RS | Initialzing http listener"),http.init(conf))})}}(this),shutDown=function(e){return function(){return log.warn("RS | Received shut down command!"),null!=db&&db.shutDown(),engine.shutDown(),process.exit()}}(this),process.on("message",function(e){return"die"===e?(log.warn("RS | GOT DIE COMMAND"),shutDown()):void 0}),process.on("SIGINT",function(){return log.warn("RS | GOT SIGINT"),shutDown()}),process.on("SIGTERM",function(){return log.warn("RS | GOT SIGTERM"),shutDown()}),init();